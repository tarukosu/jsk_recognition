<library path="lib/libjsk_pcl_ros">
  <class name="jsk_pcl/BoundingBoxFilter" type="BoundingBoxFilter"
         base_class_type="nodelet::Nodelet">
    <description>
      filter BoundingBoxArray and ClusterPointIndices based on the size
      of the bounding boxes.
    </description>
  </class>
  
  <class name="jsk_pcl/MultiPlaneSACSegmentation" type="MultiPlaneSACSegmentation"
         base_class_type="nodelet::Nodelet">
    <description>
      segment multi planes by applying SACSegmentation recursively
    </description>
  </class>
  <class name="jsk_pcl/EdgebasedCubeFinder" type="EdgebasedCubeFinder"
         base_class_type="nodelet::Nodelet">
    <description>
      a nodelet to find cube from parallel edge groups
    </description>
  </class>
  <class name="jsk_pcl/ParallelEdgeFinder" type="ParallelEdgeFinder"
         base_class_type="nodelet::Nodelet">
    <description>
      a nodelet to find parallel straight edges
    </description>
  </class>
  <class name="jsk_pcl/EdgeDepthRefinement" type="EdgeDepthRefinement"
         base_class_type="nodelet::Nodelet">
    <description>
      refine edges based on depth information
    </description>
  </class>
  <class name="jsk_pcl/OrganizedEdgeDetector" type="OrganizedEdgeDetector"
         base_class_type="nodelet::Nodelet">
    <description>
      edge detector for organized pointcloud
    </description>
  </class>
  <class name="jsk_pcl/BorderEstimator" type="BorderEstimator"
         base_class_type="nodelet::Nodelet">
    <description>
      border estimator for organized pointcloud
    </description>
  </class>
  <class name="jsk_pcl/PolygonArrayWrapper" type="PolygonArrayWrapper"
         base_class_type="nodelet::Nodelet">
    <description>
      wrap geometry_msgs::PolygonStamped and pcl_msgs::ModelCoefficients
      into jsk_pcl_ros::PolygonArray and jsk_pcl_ros::ModelCoefficientsArray
    </description>
  </class>
  <class name="jsk_pcl/DepthImageError" type="DepthImageError"
         base_class_type="nodelet::Nodelet">
    <description>compute error of depth image</description>
  </class>
  <class name="jsk_pcl/DelayPointCloud" type="DelayPointCloud"
         base_class_type="nodelet::Nodelet">
    <description>delay pointcloud messages</description>
  </class>

  <class name="jsk_pcl/PolygonAppender" type="PolygonAppender"
         base_class_type="nodelet::Nodelet">
    <description>append jsk_pcl_ros/PolygonArray </description>
  </class>
  <class name="jsk_pcl/HandleEstimator" type="HandleEstimator"
         base_class_type="nodelet::Nodelet">
    <description>estimate handle from pointcloud</description>
  </class>
  <class name="jsk_pcl/GridSampler" type="GridSampler"
         base_class_type="nodelet::Nodelet">
    <description>grid based sampling of pointcloud</description>
  </class>
  <class name="jsk_pcl/EnvironmentPlaneModeling" type="EnvironmentPlaneModeling"
         base_class_type="nodelet::Nodelet">
    <description>modeling the environment</description>
  </class>
  <class name="jsk_pcl/ColorHistogramMatcher" type="ColorHistogramMatcher"
         base_class_type="nodelet::Nodelet">
    <description>find object based on h-s-v histogram</description>
  </class>
  <class name="jsk_pcl/PolygonArrayTransformer" type="PolygonArrayTransformer"
         base_class_type="nodelet::Nodelet">
    <description>transform polygons to the specified tf frame</description>
  </class>
  <class name="jsk_pcl/StaticPolygonArrayPublisher" type="StaticPolygonArrayPublisher"
         base_class_type="nodelet::Nodelet">
    <description>publish some static polygons as jsk_pcl_ros/PolygonArray message</description>
  </class>

  <class name="jsk_pcl/PlaneRejector" type="PlaneRejector"
         base_class_type="nodelet::Nodelet">
    <description>rejects the planes which does not satisfy the parameters</description>
  </class>

  <class name="jsk_pcl/NormalEstimationIntegralImage" type="NormalEstimationIntegralImage"
         base_class_type="nodelet::Nodelet">
    <description>estimates normals based on integral image</description>
  </class>

  <class name="jsk_pcl/SelectedClusterPublisher" type="SelectedClusterPublisher"
         base_class_type="nodelet::Nodelet">
    <description>publish the points of the clusters according to the selected index</description>
  </class>


  <class name="jsk_pcl/MultiPlaneExtraction" type="MultiPlaneExtraction"
         base_class_type="nodelet::Nodelet">
    <description>extracts the points which does not belongs to the planes</description>
  </class>

  <class name="jsk_pcl/OrganizedMultiPlaneSegmentation" type="OrganizedMultiPlaneSegmentation"
         base_class_type="nodelet::Nodelet">
    <description>segment pointcloud by organized multi plane segmentation</description>
  </class>

  <class name="jsk_pcl/RegionGrowingSegmentation" type="RegionGrowingSegmentation"
         base_class_type="nodelet::Nodelet">
    <description>segment pointcloud by region growing</description>
  </class>

  <class name="jsk_pcl/NormalConcatenater" type="NormalConcatenater"
         base_class_type="nodelet::Nodelet">
    <description>Concatenater normal to x, y, z and rgb pointcloud</description>
  </class>

  <class name="jsk_pcl/ImageRotateNodelet" type="ImageRotateNodelet"
         base_class_type="nodelet::Nodelet">
    <description>Nodelet to rotate sensor_msgs/Image</description>
  </class>

  <class name="jsk_pcl/NodeletPointCloudThrottle" type="NodeletPointCloudThrottle"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>
  <class name="jsk_pcl/NodeletImageThrottle" type="NodeletImageThrottle"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>
  <class name="jsk_pcl/NodeletImageMUX" type="NodeletImageMUX"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>
  <class name="jsk_pcl/NodeletImageDEMUX" type="NodeletImageDEMUX"
         base_class_type="nodelet::Nodelet">
    <description>
  
    </description>
  </class>

  <class name="jsk_pcl/ParticleFilterTracking" type="ParticleFilterTracking"
         base_class_type="nodelet::Nodelet">
    <description>
      particle filter based tracker using KLDAdaptiveParticleFilterOMPTracker
    </description>
  </class>

  <class name="jsk_pcl/RGBColorFilter" type="RGBColorFilter"
         base_class_type="nodelet::Nodelet">
    <description>
      filter using RGB color scale
    </description>
  </class>

  <class name="jsk_pcl/HSIColorFilter" type="HSIColorFilter"
         base_class_type="nodelet::Nodelet">
    <description>
      filter using HSI color scale
    </description>
  </class>

  <class name="jsk_pcl/ResizePointsPublisher" type="ResizePointsPublisher"
         base_class_type="nodelet::Nodelet">
    <description>
      Resize PointCloud
    </description>
  </class>

  <class name="jsk_pcl/PointcloudScreenpoint" type="PointcloudScreenpoint"
         base_class_type="nodelet::Nodelet">
    <description>
      subscribe pointcloud2 and convert screenpoint(x,y) to 3dpoint(x,y,z)
      The pointcloud must be same size as screen, DepthImageCreator
      take pointcloud and camera info to generate pointlocud.
    </description>
  </class>

  <class name="jsk_pcl/DepthImageCreator" type="DepthImageCreator"
         base_class_type="nodelet::Nodelet">
    <description>
      DepthImageCreator take pointcloud and camera info to generate pointlocud.
    </description>
  </class>

  <class name="jsk_pcl/EuclideanClustering" type="EuclideanClustering"
         base_class_type="nodelet::Nodelet">
    <description>
      Clustering based on Euclidean distance
    </description>
  </class>

  <class name="jsk_pcl/ClusterPointIndicesDecomposer" type="ClusterPointIndicesDecomposer"
         base_class_type="nodelet::Nodelet">
    <description>
      decompose jsk_pcl_ros::ClusterPointIndices into PointCloud2
    </description>
  </class>
  <class name="jsk_pcl/ClusterPointIndicesDecomposerZAxis" type="ClusterPointIndicesDecomposerZAxis"
         base_class_type="nodelet::Nodelet">
    <description>
      decompose jsk_pcl_ros::ClusterPointIndices into PointCloud2 with sorting according to z axis
    </description>
  </class>

  <class name="jsk_pcl/CentroidPublisher" type="CentroidPublisher"
         base_class_type="nodelet::Nodelet">
    <description>
      publish the centroid of the pointcloud to /tf
    </description>
  </class>
  <class name="jsk_pcl/VoxelGridDownsampleManager" type="VoxelGridDownsampleManager"
         base_class_type="nodelet::Nodelet">
    <description>
      donwsample pointcloud in voxel
    </description>
  </class>
  <class name="jsk_pcl/VoxelGridDownsampleDecoder" type="VoxelGridDownsampleDecoder"
         base_class_type="nodelet::Nodelet">
    <description>
      decode donwsampled pointcloud
    </description>
  </class>
  <class name="jsk_pcl/Snapit" type="SnapIt"
         base_class_type="nodelet::Nodelet">
    <description>
      snapit nodelet node
    </description>
  </class>
  <class name="jsk_pcl/KeypointsPublisher" type="KeypointsPublisher"
         base_class_type="nodelet::Nodelet">
    <description>
      keypoints_publisher nodelet node
    </description>
  </class>
  <class name="jsk_pcl/HintedPlaneDetector" type="HintedPlaneDetector"
         base_class_type="nodelet::Nodelet">
    <description>
      HintedPlaneDetector nodelet node
    </description>
  </class>
  <class name="jsk_pcl/OctreeChangePublisher" type="OctreeChangePublisher"
         base_class_type="nodelet::Nodelet">
    <description>
      OctreeChangePublisher nodelet node
    </description>
  </class>
  <class name="jsk_pcl/TfTransformCloud" type="TfTransformCloud"
         base_class_type="nodelet::Nodelet">
    <description>
      publish transformed cloud with target id
    </description>
  </class>
  <class name="jsk_pcl/ColorizeRandomForest" type="ColorizeRandomForest"
         base_class_type="nodelet::Nodelet">
    <description>
      jsk_pcl_ros::ColorizeRandomForest
    </description>
  </class>
  <class name="jsk_pcl/ColorizeDistanceFromPlane" type="ColorizeDistanceFromPlane"
         base_class_type="nodelet::Nodelet">
    <description>
      colorize pointcloud according to the distance from the nearest plane
    </description>
  </class>
  <class name="jsk_pcl/ColorizeMapRandomForest" type="ColorizeMapRandomForest"
         base_class_type="nodelet::Nodelet">
    <description>
      jsk_pcl_ros::ColorizeMapRandomForest
    </description>
  </class>
  <class name="jsk_pcl/OrganizePointCloud" type="OrganizePointCloud"
         base_class_type="nodelet::Nodelet">
    <description>
      jsk_pcl_ros::OrganizePointCloud
    </description>
  </class>
</library>
